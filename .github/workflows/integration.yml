#
# Copyright 2013-2020 the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Integration Test
on:
    push:
        branches-ignore:
            - 'dependabot/**'
            - 'skip_ci*'
    pull_request:
        branches:
            - '*'
env:
    JHI_RUN_APP: 1
    JHI_JDK: 11
    JHI_LIB_REPO: https://github.com/jhipster/jhipster.git
    JHI_LIB_BRANCH: release
    JHI_GEN_REPO: https://github.com/jhipster/generator-jhipster.git
    JHI_GEN_BRANCH: main
    SPRING_OUTPUT_ANSI_ENABLED: ALWAYS
    SPRING_JPA_SHOW_SQL: false
    JHI_DISABLE_WEBPACK_LOGS: true
    JHI_E2E_HEADLESS: true
    JHI_INTEG: ${{ github.workspace }}/generator-jhipster/test-integration
    JHI_SCRIPTS: ${{ github.workspace }}/generator-jhipster/test-integration/scripts
    JHI_FOLDER_APP: ${{ github.workspace }}/app
    JHI_GITHUB_CI: true
    NG_CLI_ANALYTICS: 'false'
    FORCE_COLOR: 1
jobs:
    applications:
        name: jOOQ (${{ matrix.build }}, ${{ matrix.jooq-codegen }}, ${{ matrix.generator-jhipster }})
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                working-directory: app

        if: >-
            !contains(github.event.head_commit.message, '[ci skip]') &&
            !contains(github.event.head_commit.message, '[skip ci]') &&
            !contains(github.event.pull_request.title, '[skip ci]') &&
            !contains(github.event.pull_request.title, '[ci skip]') &&
            (github.event.pull_request.draft == false || !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci')) &&
            !contains(github.event.pull_request.user.login, 'dependabot')
        timeout-minutes: 40
        strategy:
            fail-fast: false
            matrix:
                node_version: [12.16.1]
                os: [ubuntu-latest]
                generator-jhipster: [generator-jhipster@6.10.1, jhipster/generator-jhipster#main]
                jooq-codegen: [liquibase]
                build: [maven, gradle]
                app-type:
                    - app
                include:
                    - app-type: app
                      entity: sqlfull
                      profile: prod
                      war: 0
                      protractor: 1
                      testcontainers: 1
        env:
            JHI_ENTITY: ${{ matrix.entity }}
            JHI_APP: ${{ matrix.app-type }}
            JHI_PROFILE: ${{ matrix.profile }}
            JHI_WAR: ${{ matrix.war }}
            JHI_PROTRACTOR: ${{ matrix.protractor }}
            JHI_TESTCONTAINERS: ${{ matrix.testcontainers }}
        steps:
            #----------------------------------------------------------------------
            # Install all tools and check configuration
            #----------------------------------------------------------------------
            - uses: actions/checkout@v2
              with:
                  path: generator-jhipster-jooq

            - uses: actions/checkout@v2
              with:
                  repository: jhipster/generator-jhipster
                  path: generator-jhipster

            - name: 'Create app dir'
              run: mkdir app
              working-directory: ${{ github.workspace }}

            - uses: actions/setup-node@v2.1.1
              with:
                  node-version: ${{ matrix.node_version }}

            - uses: actions/setup-java@v1
              with:
                  java-version: '11.x'

            - name: Get chrome/chromedriver version
              id: chromedriver-version
              run: |
                  CHROME_VERSION=$(google-chrome --version | cut -f 3 -d ' ' | cut -d '.' -f 1) \
                  && CHROMEDRIVER_VERSION=$(curl --location --fail --retry 3 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}) \
                  && echo "::set-output name=version::$CHROMEDRIVER_VERSION"

            - name: 'TOOLS: display configuration'
              run: $JHI_SCRIPTS/01-display-configuration.sh

            - name: 'TOOLS: configure tools installed by the system'
              run: $JHI_SCRIPTS/03-system.sh

            - name: 'TOOLS: configure git'
              run: $JHI_SCRIPTS/04-git-config.sh

            #----------------------------------------------------------------------
            # Install JHipster and generate project+entities
            #----------------------------------------------------------------------

            - name: 'GENERATION: install generator-jhipster and generator-jhipster-scripts'
              run: npm install -g ${{ matrix.generator-jhipster }} generator-jhipster-scripts@^1

            - name: 'GENERATION: install generator-jhipster-jooq'
              run: npm link
              working-directory: generator-jhipster-jooq

            - name: 'GENERATION: entities'
              run: |
                  $JHI_SCRIPTS/11-generate-entities.sh
                  ls -la $JHI_FOLDER_APP/.jhipster/
                  rm $JHI_FOLDER_APP/.jhipster/JpaFiltering*

            - name: 'GENERATION: project'
              run: jhipster jdl --with-entities --no-insight --blueprints scripts,jooq --jooq-version 3.13.4 --jooq-codegen ${{ matrix.jooq-codegen }} --build ${{ matrix.build }} --inline "application { config { prodDatabaseType postgresql, buildTool ${{ matrix.build }} } } "
              id: app

            #----------------------------------------------------------------------
            # Print package.json, if doesn't exist, it's a microservice, create it.
            #----------------------------------------------------------------------
            - name: Package.json information
              run: |
                  cat package.json || jhipster workspace --force --blueprints scripts --local-config-only
                  cat package.json || true
                  cat */package.json || true

            - name: Project information
              run: jhipster info

            - name: Folder information
              run: ls -la

            #----------------------------------------------------------------------
            # Tests
            #----------------------------------------------------------------------
            - name: Configure github actions
              run: npm run ci:github:configure
              id: configure

            - name: Start db containers
              run: npm run ci:test:prepare:docker

            - name: Start others containers
              if: ${{ steps.configure.outputs.docker_others == 'true' }}
              run: npm run docker:others

            - name: Backend info
              if: ${{ steps.app.outcome == 'success' && always() }}
              run: npm run backend:info
              id: backend_info

            - name: Backend javadoc
              if: ${{ steps.backend_info.outcome == 'success' && always() }}
              run: npm run backend:doc:test

            - name: Backend test
              if: ${{ steps.backend_info.outcome == 'success' && always() }}
              run: npm run ci:backend:test

            - name: E2E Packaging
              if: ${{ steps.app.outcome == 'success' && always() }}
              run: npm run ci:e2e:package
              id: packaging

            - name: E2E Prepare
              if: ${{ steps.packaging.outcome == 'success' && always() }}
              run: npm run ci:e2e:prepare
              timeout-minutes: 5

            - name: End-to-End
              if: ${{ steps.configure.outputs.e2e == 'true' && steps.packaging.outcome == 'success' && always() }}
              run: npm run ci:e2e:run
